// üß¨ Conceito: Sistema de DNA Digital
// AVISO: Este √© um exemplo conceitual, n√£o c√≥digo em produ√ß√£o

/**
 * Inspira√ß√£o: Gen√©tica e heran√ßa cultural
 * - Caracter√≠sticas s√£o herdadas mas tamb√©m evoluem
 * - Cada "gera√ß√£o" mant√©m ess√™ncia e adapta ao contexto
 * - Mudan√ßas podem ser revertidas se necess√°rio
 */

class DigitalDNA {
  constructor(parentDNA = null) {
    this.id = this.generateId();
    this.parentDNA = parentDNA;
    this.generation = parentDNA ? parentDNA.generation + 1 : 0;
    this.preferences = this.inheritPreferences(parentDNA);
    this.changes = []; // hist√≥rico de mudan√ßas
    this.createdAt = new Date();
  }

  inheritPreferences(parentDNA) {
    // Valores padr√£o para novos usu√°rios
    const defaultPreferences = {
      theme: 'light',
      layout: 'simple',
      privacy: 'balanced',
      helpfulness: 0.5 // 0 = nunca ajuda, 1 = sempre ajuda
    };

    if (!parentDNA) {
      return defaultPreferences;
    }

    // Herda prefer√™ncias do "pai" com pequenas varia√ß√µes
    return {
      theme: this.mutatePreference(parentDNA.preferences.theme, ['light', 'dark', 'auto']),
      layout: this.mutatePreference(parentDNA.preferences.layout, ['simple', 'detailed', 'minimal']),
      privacy: parentDNA.preferences.privacy, // privacy n√£o muda na heran√ßa
      helpfulness: Math.max(0, Math.min(1, parentDNA.preferences.helpfulness + (Math.random() - 0.5) * 0.1))
    };
  }

  mutatePreference(current, options) {
    // 80% chance de manter prefer√™ncia atual
    // 20% chance de mudar para op√ß√£o relacionada
    return Math.random() < 0.8 ? current : options[Math.floor(Math.random() * options.length)];
  }

  // Evolui baseado no comportamento real do usu√°rio
  evolveBasedOnBehavior(interactions) {
    interactions.forEach(interaction => {
      switch (interaction.type) {
        case 'theme_change':
          this.updatePreference('theme', interaction.value);
          break;
        case 'helped_someone':
          this.updatePreference('helpfulness', Math.min(1, this.preferences.helpfulness + 0.01));
          break;
        case 'requested_help':
          // N√£o muda helpfulness - pedir ajuda √© normal
          break;
        case 'privacy_change':
          this.updatePreference('privacy', interaction.value);
          break;
      }
    });
  }

  updatePreference(key, value) {
    const oldValue = this.preferences[key];
    this.preferences[key] = value;
    
    // Registra mudan√ßa para poss√≠vel rollback
    this.changes.push({
      timestamp: new Date(),
      key,
      oldValue,
      newValue: value
    });
  }

  // Permite voltar a estados anteriores
  rollback(targetTimestamp) {
    const relevantChanges = this.changes.filter(change => 
      change.timestamp > targetTimestamp
    );

    // Reverte mudan√ßas na ordem inversa
    relevantChanges.reverse().forEach(change => {
      this.preferences[change.key] = change.oldValue;
    });

    // Remove mudan√ßas revertidas do hist√≥rico
    this.changes = this.changes.filter(change => 
      change.timestamp <= targetTimestamp
    );
  }

  // Gera interface baseada nas prefer√™ncias
  generateInterface() {
    return {
      theme: this.preferences.theme,
      layout: this.preferences.layout,
      privacyControls: this.generatePrivacyControls(),
      helpingFeatures: this.generateHelpingFeatures()
    };
  }

  generatePrivacyControls() {
    const controls = {
      'open': ['Share everything', 'Public profile', 'Open messaging'],
      'balanced': ['Share basics', 'Selective sharing', 'Friend requests'],
      'private': ['Minimal sharing', 'Anonymous mode', 'No tracking']
    };

    return controls[this.preferences.privacy] || controls['balanced'];
  }

  generateHelpingFeatures() {
    const helpfulness = this.preferences.helpfulness;
    
    if (helpfulness > 0.7) {
      return ['Actively offer help', 'Mentor newcomers', 'Community leadership'];
    } else if (helpfulness > 0.3) {
      return ['Respond to requests', 'Participate in discussions', 'Share knowledge'];
    } else {
      return ['Observe community', 'Learn from others', 'Gradual participation'];
    }
  }

  // Cria "filho" para convite
  createChild() {
    return new DigitalDNA(this);
  }

  // Relat√≥rio sobre estado atual
  generateReport() {
    return {
      id: this.id,
      generation: this.generation,
      age: Date.now() - this.createdAt.getTime(),
      preferences: this.preferences,
      changes: this.changes.length,
      interface: this.generateInterface()
    };
  }

  // Utilit√°rio para gerar IDs √∫nicos
  generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
}

// ‚ö†Ô∏è LIMITA√á√ïES CONHECIDAS:
// - Prefer√™ncias podem n√£o refletir necessidades reais
// - Muta√ß√µes podem gerar resultados inesperados
// - Rollback pode confundir usu√°rios
// - Sistema pode ser manipulado por usu√°rios experientes

// üß™ Exemplo de uso (conceitual)
function demonstrateSystem() {
  // Usu√°rio original
  const originalUser = new DigitalDNA();
  console.log('Usu√°rio original:', originalUser.generateReport());

  // Usu√°rio convidado herda caracter√≠sticas
  const invitedUser = originalUser.createChild();
  console.log('Usu√°rio convidado:', invitedUser.generateReport());

  // Simula√ß√£o de comportamento
  invitedUser.evolveBasedOnBehavior([
    { type: 'theme_change', value: 'dark' },
    { type: 'helped_someone', value: true },
    { type: 'helped_someone', value: true }
  ]);

  console.log('Ap√≥s intera√ß√µes:', invitedUser.generateReport());

  // Rollback se necess√°rio
  const oneMinuteAgo = new Date(Date.now() - 60000);
  invitedUser.rollback(oneMinuteAgo);
  console.log('Ap√≥s rollback:', invitedUser.generateReport());
}

// Apenas execute se este arquivo for rodado diretamente
if (typeof module !== 'undefined' && require.main === module) {
  demonstrateSystem();
}

// NOTA: Este c√≥digo √© experimental e pode mudar completamente
// baseado em feedback de usu√°rios reais e descobertas t√©cnicas

export { DigitalDNA };